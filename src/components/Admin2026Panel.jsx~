import React from "react";
import { useTournament2026 } from "../context/Tournament2026Context";
import { db } from "../firebase";
import { doc, updateDoc, setDoc } from "firebase/firestore";

export default function Admin2026Panel() {
  const { currentUser, lockStatus, setLockStatus, games, setGames } = useTournament2026?.() || {};

  // If you want the same email check:
  const isAdmin = currentUser?.email === "loganbeach11@gmail.com";

  const handleSetWinner = async (gameId, teamKey) => {
    const currentWinner = games[gameId]?.winner;
    const newWinner = currentWinner === teamKey ? null : teamKey;

    // 2026: write winners into tournament2026/games doc (mirrors your 2025 structure)
    const gameRef = doc(db, "tournament2026", "games");
    await setDoc(
      gameRef,
      {
        [gameId]: {
            ...games[gameId],
	     winner: newWinner,
        },
      },
      { merge: true }
    );

    setGames((prev) => ({
      ...prev,
      [gameId]: {
        ...prev[gameId],
        winner: newWinner,
      },
    }));
  };

  const handleLockToggle = async (gameId) => {
      const newLocked = !lockStatus[gameId];
      // 2026: lock status in lockStatus2026/{gameId}
    await updateDoc(doc(db, "lockStatus2026", gameId), { locked: newLocked })
      .catch(async () => {
        await setDoc(doc(db, "lockStatus2026", gameId), { locked: newLocked });
      });

    setLockStatus((prev) => ({ ...prev, [gameId]: newLocked }));
  };

  const handleTeamUpdate = async (gameId, teamIndex, value) => {
    const field = teamIndex === 0 ? "team1" : "team2";

    // 2026: team names in games2026/{gameId}
    await updateDoc(doc(db, "games2026", gameId), { [field]: value })
      .catch(async () => {
        await setDoc(doc(db, "games2026", gameId), { [field]: value }, { merge: true });
      });

    setGames((prev) => ({
      ...prev,
	[gameId]: { ...prev[gameId], [field]: value },
	}));
  };

  if (!isAdmin) {
    return (
      <p className="text-center mt-4 text-red-600 font-semibold">
        Admin access only.
      </p>
    );
  }

  return (
    <div className="bg-white p-4 rounded-lg shadow-md mt-6">
      <h2 className="text-xl font-bold mb-4 text-center">🛠️ Admin Panel — 2026</h2>

	{Object.entries(games || {}).map(([gameId, game]) => (
	    <div key={gameId} className="border rounded p-3 mb-4 shadow-sm">
          <h3 className="font-semibold mb-2">Game {gameId}</h3>

          <div className="flex gap-4 mb-3">
            {/* Team 1 */}
            <div className="flex flex-col w-full">
              <input
                className={`p-1 rounded border ${
                  game?.winner === "team1" ? "bg-blue-100 border-blue-400" : "bg-white border-gray-300"
                }`}
                value={game?.team1 || ""}
                onChange={(e) => handleTeamUpdate(gameId, 0, e.target.value)}
                placeholder="Team 1"
              />
              <button
                className={`mt-1 text-sm rounded py-1 px-2 border ${
                  game?.winner === "team1"
                    ? "bg-blue-200 border-blue-500 font-semibold"
: "bg-gray-100 hover:bg-gray-200"
                }`}
                onClick={() => handleSetWinner(gameId, "team1")}
              >
                Set Team 1 Winner
              </button>
            </div>

            {/* Team 2 */}
            <div className="flex flex-col w-full">
              <input
                className={`p-1 rounded border ${
                  game?.winner === "team2" ? "bg-blue-100 border-blue-400" : "bg-white border-gray-300"
                }`}
                value={game?.team2 || ""}
                onChange={(e) => handleTeamUpdate(gameId, 1, e.target.value)}
                placeholder="Team 2"
              />
              <button
                className={`mt-1 text-sm rounded py-1 px-2 border ${
                  game?.winner === "team2"
? "bg-blue-200 border-blue-500 font-semibold"
                    : "bg-gray-100 hover:bg-gray-200"
                }`}
                onClick={() => handleSetWinner(gameId, "team2")}
              >
                Set Team 2 Winner
              </button>
            </div>
          </div>

          <button
            className={`px-4 py-2 rounded text-white font-semibold shadow-md transition-colors duration-200 ${
              (lockStatus?.[gameId]) ? "bg-red-600 hover:bg-red-700" : "bg-green-600 hover:bg-green-700"
            }`}
              onClick={() => handleLockToggle(gameId)}
	      >
            {(lockStatus?.[gameId]) ? "🔒 Locked" : "🔓 Unlocked"}
          </button>
        </div>
      ))}
    </div>
  );
}
